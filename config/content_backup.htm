<h1>WEEK</h1>
<p><a href="https://s40723240.github.io/wcm2021/content/WEEK1-9.html">week1-9</a></p>
<p><a href="https://s40723240.github.io/wcm2021/content/WEEK10-18.html">week10-18</a></p>
<p>個人倉儲:<a href="https://github.com/s40723240/wcm2021">https://github.com/s40723240/wcm2021</a></p>
<p>個人heroku:<a href="https://s40723240.herokuapp.com/content/index.html">https://s40723240.herokuapp.com/content/index.html</a></p>
<p>第一台主機:<a href="https://a40723240.herokuapp.com/content/index.html">https://a40723240.herokuapp.com/content/index.html</a></p>
<p>第二台主機:<a href="https://b40723240.herokuapp.com/get_page/%E5%BB%BA%E7%AB%8B%E7%B6%B2%E9%A0%81">https://b40723240.herokuapp.com/get_page/%E5%BB%BA%E7%AB%8B%E7%B6%B2%E9%A0%81</a></p>
<h2>WEEK1-9</h2>
<p><span style="color: #ff0000;"><strong>week1</strong></span></p>
<p>敘述網際內容管理課程所需要的相關資料</p>
<p><span>(電腦輔助設計室第三磁區上課時使用純 IPv6 網路協定上線, 在 Python 3.8.5 可直接執行連結到 IPv4 網站的程式 (因為 Python 會自動使用 Windows 系統中所設定的 Proxy), 但在 Python 3.9.1 環境則必須明確宣告所使用的 IPv6 代理主機 (見以下註解說明, 因為至今 Python 3.9 仍無法如 3.8 自動透過 Windows 系統代理主機執行程式)</span></p>
<p><strong><span style="color: #ff0000;">week2</span></strong></p>
<p>說明kmolab基本概念</p>
<p><span>建立 kmol_hybrid 隨身程式系統</span></p>
<p><span>利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a><span><span> </span>建立個人倉儲與網站</span></span></p>
<p><span><span>說明與 cmsimde 編輯及轉靜態網頁有關的認知</span></span></p>
<p><span><span>說明 topic0 執行動機以及自選組員後所衍生相關資料擷取問題的因應及處理</span></span></p>
<p><span style="color: #ff0000;"><strong>week4</strong></span></p>
<p><span style="color: #000000;">簡要說明網際內容管理課程開課緣由, 以及課程目標.<br/>其次說明 wcm2021 Topic0 專案執行目的.</span></p>
<p>敘述 <span>cms.bat</span><span> </span>- 讓使用者執行動態網站用的批次檔案.</p>
<p><span>       acp.bat</span><span> </span>- 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令.</p>
<p><span style="color: #ff0000;"><strong>week5</strong></span></p>
<p><span style="color: #000000;"><strong>ssh執行</strong></span></p>
<ol>
<li>請登入 Github 並且選擇帳號右下方 Settings - SSH and GPG keys 備用</li>
<li>在 start_ipv6.bat 加入<span> </span><span>set GIT_SSH=%Disk%:\putty\plink.exe</span></li>
<li>開啟 Putty 目錄中的 puttygen.exe, 以滑鼠點擊 Generate 後, 讓滑鼠在上方空白處隨意移動, 即可建立 key, 利用滑鼠選擇 key 區域中的文字資料, 並複製到 SciTE 編輯區, 存為  id_rsa 檔, 並將此內容貼至 Github SSH key 欄位中後儲存.</li>
<li>接下來在上一步驟中 puttygen.exe 視窗下方, 選擇<span> </span><span>Save private key</span><span> </span>後, 將 key 存為 my_key.ppk 或"學號.ppk"備用.</li>
<li>接下來則需要在 putty.exe 中建立一個 session, 用於以 ssh 協定連線到 github.com, 而 session 名稱可以自行命名, 但是必須與倉儲 .git 目錄中 config 的連線 url session 名稱對應.</li>
<li>當利用 putty.exe 設定連線 session 時必須注意是否使用 Proxy, 以及 SSH 中的 Auth 是否對應到前面所存檔的 .ppk private key 位置.</li>
<li>一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\my_github.reg, 並在 start_ipv6.bat 中以  regedit.exe /S y:\my_github.reg 將設定匯入.</li>
</ol>
<h4><img alt="" height="473" src="/images/ssh.png" width="904"/></h4>
<p><strong><span style="color: #ff0000;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/U9bDlg5aJhc" width="560"></iframe></span></strong></p>
<p><span style="color: #000000;">假如您使用的 cmsimde 並不是最新版本, 可以設法進入 cmsimde 子目錄後, 以 git pull origin master 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄.</span></p>
<p><strong><span style="color: #ff0000;">week7</span></strong></p>
<p><strong><span style="color: #000000;">heroku實作</span></strong></p>
<p><span>步驟一:</span><span><span> </span>(</span><span>建立 Heroku 帳號</span><span>) 進入<span> </span></span><a href="https://heroku.com/">https://heroku.com</a><span>, 建立帳號:s40723240,密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號. </span></p>
<p><span>Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB</span></p>
<p><span>步驟二:</span><span><span> </span>(</span><span>建立 Heroku app</span><span>) 登入 Heroku 後，建立s40723240 app，將可至 https://s40723240.herokuapp.com 連線取得網站最初內容.</span></p>
<p><span>步驟三:</span><span><span> </span>(下載 Heroku CLI) 從<span> </span></span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span><span> </span>下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置</span></p>
<p><span>步驟四:<span><span> </span>(</span><span>修改命令搜尋路徑</span><span>) 修改隨身系統的啟動批次檔案(ipv4 ipv6), 讓 Windows 的命令視窗中可以執行 heroku.exe</span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">set Local=%Disk%\heroku

REM for heroku login
set HTTP_PROXY=http://[2001:288:6004:17::69]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::69]:3128

set path_heroku=%Disk%:\heroku\bin;

path=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;
</pre>
<p><span>重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat</span></p>
<p><span>步驟五:<span><span> </span>(</span><span>測試 heroku 執行</span><span>) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功.</span></span></p>
<p><span><span><img alt="" height="348" src="/images/cmd_KXfRYadR0v.png" width="916"/></span></span></p>
<p><span><span>步驟六:<span><span> </span>(</span><span>設定 heroku 代理主機</span><span>)<span> </span></span>git config --global http.proxy "http://[2001:288:6004:17::69]:3128" 進行設定.</span></span></p>
<p><span>步驟七:</span><span> </span>(<span>設定同步倉儲</span>) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁:</p>
<p>靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html</p>
<p>動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服.</p>
<p><span>步驟八:</span><span><span> </span>(</span><span>以 git 進行提交推送</span><span>)<span> </span></span></p>
<p><span><span><img alt="" height="242" src="/images/1.png" width="913"/></span></span></p>
<p><span><span><img alt="" height="113" src="/images/2.png" width="913"/></span></span></p>
<p><span><span><img alt="" height="770" src="/images/3.png" width="924"/></span></span></p>
<h2>WEEK10-18</h2>
<p><span style="color: #ff0000;"><strong>week10</strong></span></p>
<p><span style="color: #000000;">這周設置登入密碼</span></p>
<p><span style="color: #000000;">帳號:kmolab</span></p>
<p>密碼:kmolab週數</p>
<p>設定在ssh上</p>
<p><span style="color: #ff0000;"><strong>week11</strong></span></p>
<p><span style="color: #000000;"><span>下載robodk522_portable.7z</span></span></p>
<p>開啟robodk.exe</p>
<p>開啟examples資料夾pick_and_place選取所有檔案</p>
<p>在python黑窗下輸入<span style="color: #ff0000;">pip install robodk</span></p>
<p><span style="color: #ff0000;"><span style="color: #000000;">將<span style="color: #ff0000;">pick_and_place.py<span style="color: #000000;">拉進S</span><span style="color: #000000;">ciTE下tools-&gt;go</span></span></span></span></p>
<p><span style="color: #ff0000;"><strong>week12</strong></span></p>
<p>YT+OBS直播</p>
<p><span style="color: #ff0000;"><strong>week13</strong></span></p>
<p>遠距上課google meet</p>
<p><strong><span style="color: #ff0000;">week14</span></strong></p>
<p>開始分組</p>
<p><span color="#ff0000" style="color: #ff0000;"><span style="color: #000000;">建立分組網站</span></span></p>
<p><strong><span style="color: #ff0000;">week15</span></strong></p>
<p><span style="color: #000000;">線上開會</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PNEg6KumGUI" width="560"></iframe></p>
<p><span style="color: #ff0000;">week16</span></p>
<p><span style="color: #000000;">建立主機</span></p>
<p><span style="color: #000000;">1.<a href="https://a40723240.herokuapp.com/content/index.html">第一台靜態主機</a></span></p>
<p><span style="color: #000000;">2.<a href="https://b40723240.herokuapp.com/get_page/%E5%BB%BA%E7%AB%8B%E7%B6%B2%E9%A0%81">第二台動態主機</a></span></p>
<h1>Note</h1>
<p><strong>Q: 如何clone含有cmsimde的倉儲</strong></p>
<p><strong><span color="#000000">A:</span><span style="color: #ff0000;"><span color="#000000">git clone --recurse-submodules "倉儲.git"</span></span></strong></p>
<p><span style="color: #000000;"><strong><span color="#000000">Q:將cmsimde更新至最新版本</span></strong></span></p>
<p><span style="color: #000000;"><strong><span color="#000000">A:<span>以 <span style="color: #ff0000;">git pull origin master</span> 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄.</span></span></strong></span></p>
<p><strong><span style="color: #ff0000;"><span color="#000000"><span style="color: #000000;">Q:python wsgi.py出現錯誤</span><br/></span></span></strong></p>
<p><strong><span style="color: #ff0000;"><span color="#000000"><span style="color: #000000;"><img alt="" height="111" src="/images/wsgi.png" width="607"/></span></span></span></strong></p>
<p><b>A:將ud_dir資料夾的<span style="color: #ff0000;">localhost.crt localhost.key</span>搬去cmsimde資料夾</b></p>
<p><b>Q:<span>利用 cms.bat 與 acp.bat 開啟動態網頁並透過 ssh 進行 git add, commit 與 push.</span></b></p>
<p><b>A:設定好ssh，倉儲含有cms.bat與acp.bat檔案，即可在倉儲下進行<span style="color: #ff0000;">acp "commit內容"<span style="color: #000000;">簡化 add commit push的過程</span></span></b></p>
<p><b><span style="color: #ff0000;"><span style="color: #000000;"><img alt="" height="343" src="/images/acp.png" width="686"/></span></span></b></p>
<p><span style="color: #ff0000;"><b><span style="color: #000000;">倉儲下進行</span>cms<span style="color: #000000;">簡化進入cmsimde python wsgi.py 的過程</span></b></span></p>
<p><b><span style="color: #ff0000;"><span style="color: #000000;"> <img alt="" height="198" src="/images/cms.png" width="686"/></span></span></b></p>
<p><strong>Q:<span style="color: #000000;">leoID not found</span></strong></p>
<p><strong><span style="color: #000000;">A:在home_ipv4(6)資料夾-&gt;.leo資料夾下建立<span style="color: #ff0000;">.leoID.txt</span>  建立內容(leo)</span></strong></p>
<h1>期中報告</h1>
<p>W9 週各組將要利用 ShareX 上台使用 Reveal 網際簡報錄製分組專題報告, 相關分組報告影片可參考協同產品設計實習<span> </span><a href="https://drive.google.com/drive/folders/1t38qYM30FeKw37F49nd0DAD5EMQseDnj">Stage1 簡報影片</a>.</p>
<p>推送程式到heroku:<a href="https://ss40723240.herokuapp.com/">https://ss40723240.herokuapp.com/</a></p>
<h4>執行步驟:</h4>
<p>1. 充分了解<span> </span><a href="https://github.com/mdecourse/nfulist">https://github.com/mdecourse/nfulist</a><span> </span>中的<span> </span><a href="https://github.com/mdecourse/nfulist/blob/master/wsgi.py">https://github.com/mdecourse/nfulist/blob/master/wsgi.py</a><span> </span>網際程式架構.</p>
<p>2. 知道將一個網際 Python 程式部署到 Heroku, 需要同時設定<span> </span><span style="color: #ff0000;"><a href="https://github.com/mdecourse/nfulist/blob/master/Procfile" style="color: #ff0000;">Procfile</a>, <a href="https://github.com/mdecourse/nfulist/blob/master/requirements.txt" style="color: #ff0000;">requirements.txt</a> 與 <a href="https://github.com/mdecourse/nfulist/blob/master/runtime.txt" style="color: #ff0000;">runtime.txt</a></span>, 其中 Process file (Procfile) 中的 web gunicorn wsgi:app, 是指定採用 gunicorn 作為網際 WSGI Http 伺服器, 且從 wsgi.py 中的 app 物件啟動執行. 而 requirements.txt 中則宣告必須執行的 Python 模組, 而 runtime.txt 則指定要使用的 Python 版次.</p>
<p>3. 從<span> </span><a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a><span> </span>可以取得透過教務主機查詢電腦輔助設計室排課時間表資料:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
  
# for pythn 3.9
proxy = 'http://[2001:288:6004:17::69]:3128'
  
os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
  
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''
semester = '1092'
classroomno = 'BGA0810'
column = True
  
if semester == None:
    semester = '1092'
if classroomno == None:
    # BGA0810 電腦輔助設計室
    classroomno = 'BGA0810'
      
headers = {'X-Requested-With': 'XMLHttpRequest'}
  
url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
post_var = {'pselyr': semester, 'pselclssroom': classroomno}
  
result = requests.post(url, data = post_var, headers = headers)
  
soup = bs4.BeautifulSoup(result.content, 'lxml')
  
# 先除掉所有 anchor
for a in soup.findAll('a'):
    # bs3 語法
    #a.replaceWithChildren()
    # bs4 語法, 將標註與內容拆開
    a.unwrap()
  
# 根據輸出設定, 取出 class='tbcls' 的 table 資料
table = soup.find('table', {'class': 'tbcls'})
  
# 重建 table, 設定邊線為 1 pixel
output = "&lt;table border='1'&gt;"
  
for i in table.contents:
    # 利用 replace 復原  
    output += str(i).replace(" ", " ")
output += "&lt;/table&gt;"
#print(output)
  
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)</pre>
<p><span>只需要針對上列程式納入"學期代號"與"實驗室編號"等兩個 GET 網際 URL 變數後, 即可將此網際程式部署至 Heroku</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">semester = request.args.get('semester')
classroomno = request.args.get('classroomno')</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import requests
import bs4
# for os.environ and os.system
import os
# for geting html file path
import pathlib
# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6
from flask import Flask, request 
from flask_cors import CORS


# 修改步驟 2/6 , 加入 Flask 相關物件設定
app = Flask(__name__)
# 此一設定可以讓程式跨網域擷取資料
CORS(app)

# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定
proxy = 'http://[2001:288:6004:17::69]:3128'

os.environ['http_proxy'] = proxy 
os.environ['HTTP_PROXY'] = proxy
os.environ['https_proxy'] = proxy
os.environ['HTTPS_PROXY'] = proxy
'''
url:  'jclassroom_ajax.php',
data: { pselyr: pselyr, pselclssroom: pselclssroom },
'''

# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator
@app.route('/')
def timeTableList():
    # 修改步驟 7/6, 為了讓使用者可以透過網際 GET 設定以下兩個變數, 必須先蓋掉原先直接設定學期與實驗室代號的部分, 改為透過 request 取得
    '''
    &lt;option value="BGA0611" &gt;BGA0611 (研討室(三)_綜合工程一館 6F)&lt;/option&gt;
    &lt;option value="BGA0620" &gt;BGA0620 (動態系統實驗室_綜合工程一館 6F)&lt;/option&gt;
    &lt;option value="BGA0640" &gt;BGA0640 (創意設計室_綜合工程一館 6F)&lt;/option&gt;
    &lt;option value="BGA0710" &gt;BGA0710 (研討室(二)_綜合工程一館 7F)&lt;/option&gt;
    &lt;option value="BGA0730" &gt;BGA0730 (研討室(一)_綜合工程一館 7F)&lt;/option&gt;
    &lt;option value="BGA0760" &gt;BGA0760 (逆向快速成型實驗室_綜合工程一館 7F)&lt;/option&gt;
    &lt;option value="BGA0810" &gt;BGA0810 (電腦輔助設計室_綜合工程一館 8F)&lt;/option&gt;
    &lt;option value="BGA0820" &gt;BGA0820 (智慧感測與致動實驗室_綜合工程一館 8F)&lt;/option&gt;
    &lt;option value="BGA0823" &gt;BGA0823 (新產品創意設計中心_綜合工程一館 8F)&lt;/option&gt;
    &lt;option value="BGA0830" &gt;BGA0830 (電腦輔助繪圖室_綜合工程一館 8F)&lt;/option&gt;
    &lt;option value="BGA0842" &gt;BGA0842 (機械元件設計實驗室_綜合工程一館 8F)&lt;/option&gt;
    &lt;option value="BGA0901" &gt;BGA0901 (國際會議廳_綜合工程一館 9F)&lt;/option&gt;
    &lt;option value="BGA0911" &gt;BGA0911 (機電實驗室_綜合工程一館 9F)&lt;/option&gt;
    '''
    '''
    semester = '1092'
    classroomno = 'BGA0810'
    column = True
    '''
    semester = request.args.get('semester')
    classroomno = request.args.get('classroomno')

    if semester == None:
        semester = '1092'
    if classroomno == None:
        # BGA0810 電腦輔助設計室
        classroomno = 'BGA0810'
    #print(semester, classroomno)
        
    headers = {'X-Requested-With': 'XMLHttpRequest'}

    url = 'https://qry.nfu.edu.tw/jclassroom_ajax.php'
    post_var = {'pselyr': semester, 'pselclssroom': classroomno}

    result = requests.post(url, data = post_var, headers = headers)

    soup = bs4.BeautifulSoup(result.content, 'lxml')

    # 先除掉所有 anchor
    for a in soup.findAll('a'):
        # bs3 語法
        #a.replaceWithChildren()
        # bs4 語法, 將標註與內容拆開
        a.unwrap()

    # 根據輸出設定, 取出 class='tbcls' 的 table 資料
    table = soup.find('table', {'class': 'tbcls'})

    # ########## 以下程式碼用來計算排課節數 ##########
    # 以下取出 td 標註資料
    table_data = [i.text for i in table.find_all('td')]
    #print(table_data)
    timeTable = []
    # 去除非排課欄位資料內容
    for i in table_data:
        if not "虎尾科技" in i and not "節" in i and not "\xa0" in i:
            timeTable.append(i)
    #print(len(timeTable))
    totalNum = len(timeTable)
    # ########## 以上程式碼用來計算排課節數 ##########

    # 重建 table, 設定邊線為 1 pixel
    output = "總排課節數: " + str(totalNum) + "&lt;br /&gt;&lt;br /&gt;&lt;table border='1'&gt;"

    for i in table.contents:
        # 利用 replace 復原  
        output += str(i).replace("&amp;nbsp", " ")
    output += "&lt;/table&gt;"
    #print(output)
    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回
    return output

@app.route('/table')
def timeTable():
    return "&lt;a href='http://www.google.com'&gt;google&lt;/a&gt;"
    
# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉
'''
# 將 output 寫入 w1_classroom.html
fileName = "w1_classroom.html"
with open(fileName, "w", encoding="utf-8") as file:
    file.write(output)
# 利用 os.system() 以 default browser 開啟 w1_class_local.html
filePath = pathlib.Path(__file__).parent.absolute()
#print(filePath)
# set firefox as default browser and start url to open html file
os.system("start file:///" + str(filePath) + "\\" + fileName)
'''

# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p><br/>根據上面去做修改<br/><br/></p>
<p>測試localhost:8080</p>
<p><img caption="false" height="542" src="/images/8080.png" width="1000"/></p>
<p><img caption="false" height="541" src="/images/8080變數.png" width="1000"/></p>
<p>創建herokuapp</p>
<p>試著將分組程式的資料夾推上heroku</p>
<p><img caption="false" height="202" src="/images/table.png" width="1000"/></p>
<p><img caption="false" height="568" src="/images/heroku0810.png" width="1000"/></p>
<p></p>
<p></p>
<p></p>
<h1>期末報告</h1>
<p><span style="color: #000000;"></span></p>
<p></p>
<p></p>