var tipuesearch = {"pages": [{'title': 'WEEK', 'text': 'week1-9 \n week10-18 \n 個人倉儲: https://github.com/s40723240/wcm2021 \n 個人heroku: https://s40723240.herokuapp.com/content/index.html \n', 'tags': '', 'url': 'WEEK.html'}, {'title': 'WEEK1-9', 'text': 'week1 \n 敘述網際內容管理課程所需要的相關資料 \n (電腦輔助設計室第三磁區上課時使用純 IPv6 網路協定上線, 在 Python 3.8.5 可直接執行連結到 IPv4 網站的程式 (因為 Python 會自動使用 Windows 系統中所設定的 Proxy), 但在 Python 3.9.1 環境則必須明確宣告所使用的 IPv6 代理主機 (見以下註解說明, 因為至今 Python 3.9 仍無法如 3.8 自動透過 Windows 系統代理主機執行程式) \n week2 \n 說明kmolab基本概念 \n 建立 kmol_hybrid 隨身程式系統 \n 利用\xa0 https://github.com/mdecourse/cmstemplate \xa0 建立個人倉儲與網站 \n 說明與 cmsimde 編輯及轉靜態網頁有關的認知 \n 說明 topic0 執行動機以及自選組員後所衍生相關資料擷取問題的因應及處理 \n week4 \n 敘述\xa0 cms.bat \xa0 - 讓使用者執行動態網站用的批次檔案. \n \xa0 \xa0 \xa0 \xa0acp.bat \xa0 - 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令. \n week5 \n ssh執行 \n \n 請登入 Github 並且選擇帳號右下方 Settings - SSH and GPG keys 備用 \n 在 start_ipv6.bat 加入 \xa0 set GIT_SSH=%Disk%:\\putty\\plink.exe \n 開啟 Putty 目錄中的 puttygen.exe, 以滑鼠點擊 Generate 後, 讓滑鼠在上方空白處隨意移動, 即可建立 key, 利用滑鼠選擇 key 區域中的文字資料, 並複製到 SciTE 編輯區, 存為\xa0 id_rsa 檔, 並將此內容貼至 Github SSH key 欄位中後儲存. \n 接下來在上一步驟中 puttygen.exe 視窗下方, 選擇 \xa0 Save private key \xa0 後, 將 key 存為 my_key.ppk 或"學號.ppk"備用. \n 接下來則需要在 putty.exe 中建立一個 session, 用於以 ssh 協定連線到 github.com, 而 session 名稱可以自行命名, 但是必須與倉儲 .git 目錄中 config 的連線 url session 名稱對應. \n 當利用 putty.exe 設定連線 session 時必須注意是否使用 Proxy, 以及 SSH 中的 Auth 是否對應到前面所存檔的 .ppk private key 位置. \n 一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham] 將 registry 設定匯出存為 y:\\my_github.reg, 並在 start_ipv6.bat 中以\xa0 regedit.exe /S y:\\my_github.reg 將設定匯入. \n \n \n \n 假如您使用的 cmsimde 並不是最新版本, 可以設法進入 cmsimde 子目錄後, 以 git pull origin master 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄. \n week7 \n heroku實作 \n 步驟一: \xa0 ( 建立 Heroku 帳號 ) 進入 \xa0 https://heroku.com , 建立帳號:s40723240,密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,\xa0 並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.\xa0 \n Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB \n 步驟二: \xa0 ( 建立 Heroku app ) 登入 Heroku 後，建立s40723240 app，將可至 https://s40723240.herokuapp.com 連線取得網站最初內容. \n 步驟三: \xa0 (下載 Heroku CLI) 從 \xa0 http://a.kmol.info:88/heroku.7z \xa0 下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置 \n 步驟四: \xa0 ( 修改命令搜尋路徑 ) 修改隨身系統的啟動批次檔案(ipv4 ipv6), 讓 Windows 的命令視窗中可以執行 heroku.exe \n set Local=%Disk%\\heroku\n\nREM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::69]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::69]:3128\n\nset path_heroku=%Disk%:\\heroku\\bin; \n 重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat \n 步驟五: \xa0 ( 測試 heroku 執行 ) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功. \n \n 步驟六: \xa0 ( 設定 heroku 代理主機 ) \xa0 git config --global http.proxy "http://[2001:288:6004:17::69]:3128" 進行設定. \n 步驟七: \xa0 ( 設定同步倉儲 ) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁: \n 靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html \n 動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服. \n 步驟八: \xa0 ( 以 git 進行提交推送 ) \xa0 \n \n \n \n', 'tags': '', 'url': 'WEEK1-9.html'}, {'title': 'WEEK10-18', 'text': '', 'tags': '', 'url': 'WEEK10-18.html'}, {'title': 'Note', 'text': 'Q: 如何clone含有cmsimde的倉儲 \n A: git clone --recurse-submodules "倉儲.git" \n Q:將cmsimde更新至最新版本 \n A: 以  git pull origin master  拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄. \n Q:python wsgi.py出現錯誤 \n \n A:將ud_dir資料夾的localhost.crt localhost.key搬去cmsimde資料夾 \n Q: 利用 cms.bat 與 acp.bat 開啟動態網頁並透過 ssh 進行 git add, commit 與 push. \n A:設定好ssh，倉儲含有cms.bat與acp.bat檔案，即可在倉儲下進行 acp "commit內容" 簡化 add commit push的過程 \n 倉儲下進行 cms 簡化進入cmsimde python wsgi.py 的過程 \n \xa0 \n \n \n', 'tags': '', 'url': 'Note.html'}]};