var tipuesearch = {"pages": [{'title': 'WEEK', 'text': 'Mid: week1-9 \n Final: week10-18 \n repository: https://github.com/s40723240/wcm2021 \n heroku: https://s40723240.herokuapp.com/content/index.html \n Task1: 靜態主機 \n Task2: 動態主機 \xa0 動態主機2 \n 心得: \n 每年上老師的課真的都會有不同的感受，程式語言的改版真的很快，當初大一時還在python3.7.3現在已經3.9.5了，且創倉儲，SSH到改版的方式都有了更快速的捷徑，回想起來真的學習了很多! 只是吸收能力很有限的我不知道還會多少，從大一開始編輯leo editor的簡報跟網誌及編寫python小遊戲到大二的solvespace繪圖、webots及coppeliasim(V-rep)跟ubuntu虛擬主機的連環操作等等，都是很寶貴的操作經驗。 \n 這學期主要還是語法架構開始講起到heroku實作及robodk操作跟倉儲可以備份到gitlab跟fossil SCM。 \n', 'tags': '', 'url': 'WEEK.html'}, {'title': 'WEEK1-9', 'text': 'week1 \n 敘述網際內容管理課程所需要的相關資料 \n (電腦輔助設計室第三磁區上課時使用純 IPv6 網路協定上線, 在 Python 3.8.5 可直接執行連結到 IPv4 網站的程式 (因為 Python 會自動使用 Windows 系統中所設定的 Proxy), 但在 Python 3.9.1 環境則必須明確宣告所使用的 IPv6 代理主機 (見以下註解說明, 因為至今 Python 3.9 仍無法如 3.8 自動透過 Windows 系統代理主機執行程式) \n week2 \n 說明kmolab基本概念 \n 建立 kmol_hybrid 隨身程式系統 \n 利用\xa0 https://github.com/mdecourse/cmstemplate \xa0 建立個人倉儲與網站 \n 說明與 cmsimde 編輯及轉靜態網頁有關的認知 \n 說明 topic0 執行動機以及自選組員後所衍生相關資料擷取問題的因應及處理 \n week4 \n 簡要說明網際內容管理課程開課緣由, 以及課程目標. 其次說明 wcm2021 Topic0 專案執行目的. \n 敘述\xa0 cms.bat \xa0 - 讓使用者執行動態網站用的批次檔案. \n \xa0 \xa0 \xa0 \xa0acp.bat \xa0 - 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令. \n week5 \n ssh執行 \n \n 請登入 Github 並且選擇帳號右下方 Settings - SSH and GPG keys 備用 \n 在 start_ipv6.bat 加入 \xa0 set GIT_SSH=%Disk%:\\putty\\plink.exe \n 開啟 Putty 目錄中的 puttygen.exe, 以滑鼠點擊 Generate 後, 讓滑鼠在上方空白處隨意移動, 即可建立 key, 利用滑鼠選擇 key 區域中的文字資料, 並複製到 SciTE 編輯區, 存為\xa0 id_rsa 檔, 並將此內容貼至 Github SSH key 欄位中後儲存. \n 接下來在上一步驟中 puttygen.exe 視窗下方, 選擇 \xa0 Save private key \xa0 後, 將 key 存為 my_key.ppk 或"學號.ppk"備用. \n 接下來則需要在 putty.exe 中建立一個 session, 用於以 ssh 協定連線到 github.com, 而 session 名稱可以自行命名, 但是必須與倉儲 .git 目錄中 config 的連線 url session 名稱對應. \n 當利用 putty.exe 設定連線 session 時必須注意是否使用 Proxy, 以及 SSH 中的 Auth 是否對應到前面所存檔的 .ppk private key 位置. \n 一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham] 將 registry 設定匯出存為 y:\\my_github.reg, 並在 start_ipv6.bat 中以\xa0 regedit.exe /S y:\\my_github.reg 將設定匯入. \n \n \n 假如您使用的 cmsimde 並不是最新版本, 可以設法進入 cmsimde 子目錄後, 以 git pull origin master 拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄. \n week7 \n heroku實作 \n 步驟一: \xa0 ( 建立 Heroku 帳號 ) 進入 \xa0 https://heroku.com , 建立帳號:s40723240,密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,\xa0 並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.\xa0 \n Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB \n 步驟二: \xa0 ( 建立 Heroku app ) 登入 Heroku 後，建立s40723240 app，將可至 https://s40723240.herokuapp.com 連線取得網站最初內容. \n 步驟三: \xa0 (下載 Heroku CLI) 從 \xa0 http://a.kmol.info:88/heroku.7z \xa0 下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置 \n 步驟四: \xa0 ( 修改命令搜尋路徑 ) 修改隨身系統的啟動批次檔案(ipv4 ipv6), 讓 Windows 的命令視窗中可以執行 heroku.exe \n set Local=%Disk%\\heroku\n\nREM for heroku login\nset HTTP_PROXY=http://[2001:288:6004:17::69]:3128\nset HTTPS_PROXY=http://[2001:288:6004:17::69]:3128\n\nset path_heroku=%Disk%:\\heroku\\bin;\n\npath=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;\n \n 重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat \n 步驟五: \xa0 ( 測試 heroku 執行 ) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功. \n \n 步驟六: \xa0 ( 設定 heroku 代理主機 ) \xa0 git config --global http.proxy "http://[2001:288:6004:17::69]:3128" 進行設定. \n 步驟七: \xa0 ( 設定同步倉儲 ) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁: \n 靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html \n 動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服. \n 步驟八: \xa0 ( 以 git 進行提交推送 ) \xa0 \n \n \n \n', 'tags': '', 'url': 'WEEK1-9.html'}, {'title': 'WEEK10-18', 'text': 'week10 \n 這周設置登入密碼 \n 帳號:kmolab \n 密碼:kmolab週數 \n 設定在ssh上 \n week11 \n cmd ipconfig/all 查詢IP 尋找ipv4位址 192.168.88.54 將robodk範例資料夾中拉pick and place.py 拉近SciTE編輯器 在 RDK = Robolink () 括弧中打上 "192.168.88.54" 開啟robodk.exe後將範例資料夾中除了pick and place.py檔案其他全選開啟 工具/選項/其他/允許外部API/localhost確認是否正確輸入目前電腦網路IP 進入編輯器 tools->GO \n \n \n week12 \n 上課說明利用YT+OBS直播 \n week13 \n 遠距上課google meet \n week14 \n 開始分組 \n 建立分組網站 \n week15 \n 線上開會 \n \n week16 \n 建立主機 \n 1. 第一台靜態主機 \n \n 2. 第二台動態主機 \n \n week17 \n 將進度補上進行期末報告 \n \n', 'tags': '', 'url': 'WEEK10-18.html'}, {'title': 'Note', 'text': 'Q: 如何clone含有cmsimde的倉儲 \n A: git clone --recurse-submodules "倉儲.git" \n Q:將cmsimde更新至最新版本 \n A: 以  git pull origin master  拉回最新版本的程式碼, 並且注意是否 cmsimde/up_dir 目錄中有檔案更新, 若是則必須將這些隨著版次更新的檔案, 從 up_dir 複製到倉儲根目錄. \n Q:python wsgi.py出現錯誤 \n \n A:將ud_dir資料夾的 localhost.crt localhost.key 搬去cmsimde資料夾 \n Q: 利用 cms.bat 與 acp.bat 開啟動態網頁並透過 ssh 進行 git add, commit 與 push. \n A:設定好ssh，倉儲含有cms.bat與acp.bat檔案，即可在倉儲下進行 acp "commit內容" 簡化 add commit push的過程 \n \n 倉儲下進行 cms 簡化進入cmsimde python wsgi.py 的過程 \n \xa0 \n Q: leoID not found \n A:在home_ipv4(6)資料夾->.leo資料夾下建立 .leoID.txt \xa0 建立內容(leo) \n', 'tags': '', 'url': 'Note.html'}, {'title': '期中報告', 'text': 'W9 週各組將要利用 ShareX 上台使用 Reveal 網際簡報錄製分組專題報告, 相關分組報告影片可參考協同產品設計實習 \xa0 Stage1 簡報影片 . \n 推送程式到heroku: https://ss40723240.herokuapp.com/ \n 執行步驟: \n 1. 充分了解 \xa0 https://github.com/mdecourse/nfulist \xa0 中的 \xa0 https://github.com/mdecourse/nfulist/blob/master/wsgi.py \xa0 網際程式架構. \n 2. 知道將一個網際 Python 程式部署到 Heroku, 需要同時設定 \xa0 Procfile ,\xa0 requirements.txt \xa0與\xa0 runtime.txt , 其中 Process file (Procfile) 中的 web gunicorn wsgi:app, 是指定採用 gunicorn 作為網際 WSGI Http 伺服器, 且從 wsgi.py 中的 app 物件啟動執行. 而 requirements.txt 中則宣告必須執行的 Python 模組, 而 runtime.txt 則指定要使用的 Python 版次. \n 3. 從 \xa0 Topic0 \xa0 可以取得透過教務主機查詢電腦輔助設計室排課時間表資料: \n import requests\nimport bs4\n# for os.environ and os.system\nimport os\n# for geting html file path\nimport pathlib\n  \n# for pythn 3.9\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n  \nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n  \n\'\'\'\nurl:  \'jclassroom_ajax.php\',\ndata: { pselyr: pselyr, pselclssroom: pselclssroom },\n\'\'\'\nsemester = \'1092\'\nclassroomno = \'BGA0810\'\ncolumn = True\n  \nif semester == None:\n    semester = \'1092\'\nif classroomno == None:\n    # BGA0810 電腦輔助設計室\n    classroomno = \'BGA0810\'\n      \nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n  \nurl = \'https://qry.nfu.edu.tw/jclassroom_ajax.php\'\npost_var = {\'pselyr\': semester, \'pselclssroom\': classroomno}\n  \nresult = requests.post(url, data = post_var, headers = headers)\n  \nsoup = bs4.BeautifulSoup(result.content, \'lxml\')\n  \n# 先除掉所有 anchor\nfor a in soup.findAll(\'a\'):\n    # bs3 語法\n    #a.replaceWithChildren()\n    # bs4 語法, 將標註與內容拆開\n    a.unwrap()\n  \n# 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\ntable = soup.find(\'table\', {\'class\': \'tbcls\'})\n  \n# 重建 table, 設定邊線為 1 pixel\noutput = "<table border=\'1\'>"\n  \nfor i in table.contents:\n    # 利用 replace 復原  \n    output += str(i).replace("\xa0", " ")\noutput += "</table>"\n#print(output)\n  \n# 將 output 寫入 w1_classroom.html\nfileName = "w1_classroom.html"\nwith open(fileName, "w", encoding="utf-8") as file:\n    file.write(output)\n# 利用 os.system() 以 default browser 開啟 w1_class_local.html\nfilePath = pathlib.Path(__file__).parent.absolute()\n#print(filePath)\n# set firefox as default browser and start url to open html file\nos.system("start file:///" + str(filePath) + "\\\\" + fileName) \n 只需要針對上列程式納入"學期代號"與"實驗室編號"等兩個 GET 網際 URL 變數後, 即可將此網際程式部署至 Heroku \n semester = request.args.get(\'semester\')\nclassroomno = request.args.get(\'classroomno\') \n import requests\nimport bs4\n# for os.environ and os.system\nimport os\n# for geting html file path\nimport pathlib\n# 以下因應改為 Heroku based 程式所需導入模組,  修改步驟 1/6\nfrom flask import Flask, request \nfrom flask_cors import CORS\n\n\n# 修改步驟 2/6 , 加入 Flask 相關物件設定\napp = Flask(__name__)\n# 此一設定可以讓程式跨網域擷取資料\nCORS(app)\n\n# for pythn 3.9,  在近端測試時仍需要設定 proxy, 若使用 Python 3.8 執行則會自動使用系統的 Proxy 設定\nproxy = \'http://[2001:288:6004:17::69]:3128\'\n\nos.environ[\'http_proxy\'] = proxy \nos.environ[\'HTTP_PROXY\'] = proxy\nos.environ[\'https_proxy\'] = proxy\nos.environ[\'HTTPS_PROXY\'] = proxy\n\'\'\'\nurl:  \'jclassroom_ajax.php\',\ndata: { pselyr: pselyr, pselclssroom: pselclssroom },\n\'\'\'\n\n# 修改步驟 3/6, 試著將程式改為網際模式, 需要套用 Flask 的網際 decorator\n@app.route(\'/\')\ndef timeTableList():\n    # 修改步驟 7/6, 為了讓使用者可以透過網際 GET 設定以下兩個變數, 必須先蓋掉原先直接設定學期與實驗室代號的部分, 改為透過 request 取得\n    \'\'\'\n    <option value="BGA0611" >BGA0611 (研討室(三)_綜合工程一館 6F)</option>\n    <option value="BGA0620" >BGA0620 (動態系統實驗室_綜合工程一館 6F)</option>\n    <option value="BGA0640" >BGA0640 (創意設計室_綜合工程一館 6F)</option>\n    <option value="BGA0710" >BGA0710 (研討室(二)_綜合工程一館 7F)</option>\n    <option value="BGA0730" >BGA0730 (研討室(一)_綜合工程一館 7F)</option>\n    <option value="BGA0760" >BGA0760 (逆向快速成型實驗室_綜合工程一館 7F)</option>\n    <option value="BGA0810" >BGA0810 (電腦輔助設計室_綜合工程一館 8F)</option>\n    <option value="BGA0820" >BGA0820 (智慧感測與致動實驗室_綜合工程一館 8F)</option>\n    <option value="BGA0823" >BGA0823 (新產品創意設計中心_綜合工程一館 8F)</option>\n    <option value="BGA0830" >BGA0830 (電腦輔助繪圖室_綜合工程一館 8F)</option>\n    <option value="BGA0842" >BGA0842 (機械元件設計實驗室_綜合工程一館 8F)</option>\n    <option value="BGA0901" >BGA0901 (國際會議廳_綜合工程一館 9F)</option>\n    <option value="BGA0911" >BGA0911 (機電實驗室_綜合工程一館 9F)</option>\n    \'\'\'\n    \'\'\'\n    semester = \'1092\'\n    classroomno = \'BGA0810\'\n    column = True\n    \'\'\'\n    semester = request.args.get(\'semester\')\n    classroomno = request.args.get(\'classroomno\')\n\n    if semester == None:\n        semester = \'1092\'\n    if classroomno == None:\n        # BGA0810 電腦輔助設計室\n        classroomno = \'BGA0810\'\n    #print(semester, classroomno)\n        \n    headers = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\n    url = \'https://qry.nfu.edu.tw/jclassroom_ajax.php\'\n    post_var = {\'pselyr\': semester, \'pselclssroom\': classroomno}\n\n    result = requests.post(url, data = post_var, headers = headers)\n\n    soup = bs4.BeautifulSoup(result.content, \'lxml\')\n\n    # 先除掉所有 anchor\n    for a in soup.findAll(\'a\'):\n        # bs3 語法\n        #a.replaceWithChildren()\n        # bs4 語法, 將標註與內容拆開\n        a.unwrap()\n\n    # 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料\n    table = soup.find(\'table\', {\'class\': \'tbcls\'})\n\n    # ########## 以下程式碼用來計算排課節數 ##########\n    # 以下取出 td 標註資料\n    table_data = [i.text for i in table.find_all(\'td\')]\n    #print(table_data)\n    timeTable = []\n    # 去除非排課欄位資料內容\n    for i in table_data:\n        if not "虎尾科技" in i and not "節" in i and not "\\xa0" in i:\n            timeTable.append(i)\n    #print(len(timeTable))\n    totalNum = len(timeTable)\n    # ########## 以上程式碼用來計算排課節數 ##########\n\n    # 重建 table, 設定邊線為 1 pixel\n    output = "總排課節數: " + str(totalNum) + "<br /><br /><table border=\'1\'>"\n\n    for i in table.contents:\n        # 利用 replace 復原 \xa0\n        output += str(i).replace("&nbsp", "\xa0")\n    output += "</table>"\n    #print(output)\n    # 修改步驟 5/6 , 因為已經將原先可列印出程式的步驟改為 function, 因此必須以 return 將擷取到的網頁資料傳回\n    return output\n\n@app.route(\'/table\')\ndef timeTable():\n    return "<a href=\'http://www.google.com\'>google</a>"\n    \n# 修改步驟 4/6 , 因為改寫為網際程式後, 下列將內容存檔並自動呼叫 Firefox 的程式碼不再適用, 必須蓋掉\n\'\'\'\n# 將 output 寫入 w1_classroom.html\nfileName = "w1_classroom.html"\nwith open(fileName, "w", encoding="utf-8") as file:\n    file.write(output)\n# 利用 os.system() 以 default browser 開啟 w1_class_local.html\nfilePath = pathlib.Path(__file__).parent.absolute()\n#print(filePath)\n# set firefox as default browser and start url to open html file\nos.system("start file:///" + str(filePath) + "\\\\" + fileName)\n\'\'\'\n\n# 修改步驟 6/6, 配合網際程式啟動,  以及 Python 程式執行與納入其他程式執行的特定進行配置\n\nif __name__ == \'__main__\':\n    app.run(host=\'127.0.0.1\', port=8080, debug=True) \n 根據上面去做修改 \n 測試localhost:8080 \n \n \n 創建herokuapp \n 試著將分組程式的資料夾推上heroku \n \n \n \n \n \n', 'tags': '', 'url': '期中報告.html'}, {'title': '期末報告', 'text': '本學期報告導覽影片 \n \n 主機一: 利用 Heroku 呈現靜態網頁內容. \n https://a40723240.herokuapp.com/content/index.html \n \n 主機二: Heroku Python 應用程式主機 \n https://b40723240.herokuapp.com/get_page/%E5%BB%BA%E7%AB%8B%E7%B6%B2%E9%A0%81 \n https://ss40723240.herokuapp.com/table \n 動態網站編輯無法儲存內容(版次) \n 操作影片 \n \n', 'tags': '', 'url': '期末報告.html'}]};